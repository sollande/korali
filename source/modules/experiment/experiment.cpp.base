#include "auxiliar/fs.hpp"
#include "auxiliar/koraliJson.hpp"
#include "engine.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/conduit/distributed/distributed.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/agent/agent.hpp"
#include "modules/solver/learner/learner.hpp"
#include "modules/solver/solver.hpp"
#include "sample/sample.hpp"
#include <chrono>
#include <cstdio>
#include <map>
#include <stdlib.h>

__startNamespace__;
/**
 * @brief Pointer to the current experiment in execution
 */
Experiment *__expPointer;

/**
 * @brief Pointer to the calling thread
 */
cothread_t __returnThread;

/**
 * @brief Function for the initialization of new coroutine threads.
 */
void threadWrapper()
{
  auto e = __expPointer;
  e->run();

  co_switch(e->_engine->_thread);
  KORALI_LOG_ERROR("Trying to continue finished Experiment thread.\n");
}

void __className__::run()
{
  co_switch(__returnThread);

  auto t0 = std::chrono::system_clock::now();

  // Saving initial configuration
  if (_currentGeneration == 0)
    if (_fileOutputEnabled)
    {
      _timestamp = getTimestamp();
      getConfiguration(_js.getJson());
      saveState();
    }

  _currentGeneration++;

  _solver->_terminationCriteria.clear();
  while (_solver->checkTermination() == false)
  {
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _solver->printGenerationBefore();
      }

    // Cleaning sample information from previous generation
    _js["Samples"] = knlohmann::json();

    // Timing and Profiling Start
    auto t0 = std::chrono::system_clock::now();
    _solver->runGeneration();

    // Timing and Profiling End
    auto t1 = std::chrono::system_clock::now();

    // Printing results to console
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _solver->printGenerationAfter();
        _logger->logInfo("Detailed", "Experiment: %lu - Generation Time: %.3fs\n", _experimentId, std::chrono::duration<double>(t1 - t0).count());
      }

    // Saving state to a file
    if (_fileOutputEnabled)
      if (_fileOutputFrequency > 0)
        if (_currentGeneration % _fileOutputFrequency == 0)
        {
          _timestamp = getTimestamp();
          getConfiguration(_js.getJson());
          saveState();
        }

    _currentGeneration++;

    // Check for error signals from python
    if (isPythonActive && PyErr_CheckSignals() != 0) KORALI_LOG_ERROR("User requested break.\n");
  }

  auto t1 = std::chrono::system_clock::now();

  // Finalizing experiment
  _currentGeneration--;
  _isFinished = true;
  _solver->finalize();

  // Saving last generation and final results
  _timestamp = getTimestamp();
  getConfiguration(_js.getJson());
  if (_fileOutputEnabled) saveState();

  _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
  _logger->logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str());
  for (size_t i = 0; i < _solver->_terminationCriteria.size(); i++) _logger->logInfo("Normal", "Termination Criterion Met: %s\n", _solver->_terminationCriteria[i].c_str());
  _logger->logInfo("Normal", "Final Generation: %lu\n", _currentGeneration);
  _logger->logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(t1 - t0).count());
}

void __className__::saveState()
{
  auto beginTime = std::chrono::steady_clock::now();

  if (_storeSampleInformation == true) _js["Samples"] = _sampleInfo["Samples"];

  char genFileName[256];

  // Naming result files depends on whether incremental numbering is used, or we overwrite previous results
  if (_fileOutputUseMultipleFiles == true)
    sprintf(genFileName, "gen%08lu.json", _currentGeneration);
  else
    sprintf(genFileName, "genLatest.json");

  // If results directory doesn't exist, create it
  if (!dirExists(_fileOutputPath)) mkdir(_fileOutputPath);

  std::string filePath = "./" + _fileOutputPath + "/" + genFileName;

  if (saveJsonToFile(filePath.c_str(), _js.getJson()) != 0) KORALI_LOG_ERROR("Error trying to save result file: %s.\n", filePath.c_str());

  // If using multiple files, create a hard link to the latest result
  std::string linkPath = "./" + _fileOutputPath + "/latest";
  remove(linkPath.c_str());
  link(filePath.c_str(), linkPath.c_str());

  auto endTime = std::chrono::steady_clock::now();
  _resultSavingTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();
}

bool __className__::loadState(const std::string &path)
{
  return loadJsonFromFile(_js.getJson(), path.c_str());
}

__className__::Experiment()
{
  _runID = getTimehash();
  _k = this;
  _logger = NULL;
  _engine = NULL;
  _currentGeneration = 0;
  _isInitialized = false;
}

void __className__::initialize()
{
  // Initializing profiling timers
  _resultSavingTime = 0.0;

  __expPointer = this;
  _thread = co_create(1 << 20, threadWrapper);
  __returnThread = co_active();
  co_switch(_thread);

  // Clearning sample and previous result information
  _js["Results"] = knlohmann::json();
  _js["Samples"] = knlohmann::json();

  // Initializing Variables
  if (isDefined(_js.getJson(), "Variables"))
  {
    _variables.resize(_js["Variables"].size());
    for (size_t i = 0; i < _variables.size(); i++) _variables[i] = new Variable;
  }

  // Applying experiment defaults
  applyModuleDefaults(_js.getJson());

  // If this is the initial run, apply defaults
  if (_currentGeneration == 0) setSeed(_js.getJson());

  // Setting configuration
  setConfiguration(_js.getJson());

  // Getting configuration back into the JSON storage
  getConfiguration(_js.getJson());

  // Updating verbosity level
  _logger = new Logger(_consoleOutputVerbosity, stdout);

  // Initializing problem and solver modules
  _problem->initialize();
  _solver->initialize();

  _isInitialized = true;
}

void __className__::finalize()
{
  for (size_t i = 0; i < _variables.size(); i++) delete _variables[i];
  _variables.clear();
  for (size_t i = 0; i < _distributions.size(); i++) delete _distributions[i];
  _distributions.clear();
  if (_isInitialized == true) co_delete(_thread);
  delete _logger;
  delete _problem;
}

knlohmann::json &__className__::operator[](const std::string &key) { return _js[key]; }
pybind11::object __className__::getItem(const pybind11::object key) { return _js.getItem(key); }
void __className__::setItem(const pybind11::object key, const pybind11::object val) { _js.setItem(key, val); }

void __className__::setSeed(knlohmann::json &js)
{
  if (isDefined(js, "Random Seed"))
  {
    try
    {
      if (js["Random Seed"].get<size_t>() == 0)
      {
        js["Random Seed"] = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();
      }
    }
    catch (const std::exception &e)
    {
      KORALI_LOG_ERROR(" + Object: [ Experiment ] \n + Key:    ['Random Seed']\n%s", e.what());
    }
  }
}

__moduleAutoCode__;

__endNamespace__;
