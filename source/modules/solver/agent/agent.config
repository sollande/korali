{

  "Module Data":
  {
    "Class Name": "Agent",
    "Namespace": ["korali", "solver"],
    "Parent Class Name": "Solver"
  },

 "Configuration Settings":
 [
   {
   "Name": [ "Mode" ],
   "Type": "std::string",
   "Options": [
               { "Value": "Training", "Description": "Learns a policy for the reinforcement learning problem." },
               { "Value": "Testing", "Description": "Tests the policy with a learned policy." }
              ],
   "Description": "Specifies the operation mode for the agent."
  },
  {
    "Name": [ "Testing", "Sample Ids" ],
    "Type": "std::vector<size_t>",
    "Description": "A vector with the identifiers for the samples to test the hyperparameters with."
  },
  {
    "Name": [ "Testing", "Current Policy" ],
    "Type": "knlohmann::json",
    "Description": "The current hyperparameters of the policy to test."
  },
  {
    "Name": [ "Training", "Average Depth" ],
    "Type": "size_t",
    "Description": "Specifies the depth of the running training average to report."
  },
  {
    "Name": [ "Concurrent Workers" ],
    "Type": "size_t",
    "Description": "Indicates the number of concurrent environments to use to collect experiences."
  },
  {
    "Name": [ "Episodes Per Generation" ],
    "Type": "size_t",
    "Description": "Indicates how many episodes to complete in a generation (checkpoints are generated between generations)."
  },
  {
    "Name": [ "Mini Batch", "Size" ],
    "Type": "size_t",
    "Description": "The number of experiences to randomly select to train the neural network(s) with."
  },
  {
    "Name": [ "Time Sequence Length" ],
    "Type": "size_t",
    "Description": "Indicates the number of contiguous experiences to pass to the NN for learning. This is only useful when using recurrent NNs."
  },
  {
    "Name": [ "Learning Rate" ],
    "Type": "float",
    "Description": "The initial learning rate to use for the NN hyperparameter optimization."
  },
  {
   "Name": [ "L2 Regularization", "Enabled" ],
   "Type": "bool",
   "Description": "Boolean to determine if l2 regularization will be applied to the neural networks."
  },
  {
   "Name": [ "L2 Regularization", "Importance" ],
   "Type": "float",
   "Description": "Coefficient for l2 regularization."
  },
  {
    "Name": [ "Neural Network", "Hidden Layers" ],
    "Type": "knlohmann::json",
    "Description": "Indicates the configuration of the hidden neural network layers."
  },
  {
    "Name": [ "Neural Network", "Optimizer" ],
    "Type": "std::string",
    "Description": "Indicates the optimizer algorithm to update the NN hyperparameters."
  },
  {
   "Name": [ "Neural Network", "Engine" ],
   "Type": "std::string",
   "Description": "Specifies which Neural Network backend to use."
  },
  {
   "Name": [ "Discount Factor" ],
   "Type": "float",
   "Description": "Represents the discount factor to weight future experiences."
  },
  {
   "Name": [ "Importance Weight Truncation Level" ],
   "Type": "float",
   "Description": "Represents the discount factor to weight future experiences."
  },
  {
    "Name": [ "Experience Replay", "Serialize" ],
    "Type": "bool",
    "Description": "Indicates whether to serialize and store the experience replay after each generation. Disabling will reduce I/O overheads but will disable the checkpoint/resume function."
  },
  {
    "Name": [ "Experience Replay", "Start Size" ],
    "Type": "size_t",
    "Description": "The minimum number of experiences before learning starts."
  },
  {
    "Name": [ "Experience Replay", "Maximum Size" ],
    "Type": "size_t",
    "Description": "The size of the replay memory. If this number is exceeded, experiences are deleted."
  },
  {
    "Name": [ "Experience Replay", "Off Policy", "Cutoff Scale" ],
    "Type": "float",
    "Description": "Initial Cut-Off to classify experiences as on- or off-policy. (c_max in https://arxiv.org/abs/1807.05827)"
  },
  {
    "Name": [ "Experience Replay", "Off Policy", "Target" ],
    "Type": "float",
    "Description": "Target fraction of off-policy experiences in the replay memory. (D in https://arxiv.org/abs/1807.05827)"
  },
  {
    "Name": [ "Experience Replay", "Off Policy", "Annealing Rate" ],
    "Type": "float",
    "Description": "Annealing rate for Off Policy Cutoff Scale and Learning Rate. (A in https://arxiv.org/abs/1807.05827)"
  },
  {
   "Name": [ "Experience Replay", "Off Policy", "REFER Beta" ],
   "Type": "float",
   "Description": "Initial value for the penalisation coefficient for off-policiness. (beta in https://arxiv.org/abs/1807.05827)"
  },
  {
    "Name": [ "Experiences Between Policy Updates" ],
    "Type": "float",
    "Description": "The number of experiences to receive before training/updating (real number, may be less than < 1.0, for more than one update per experience)."
  },
  {
    "Name": [ "State Rescaling", "Enabled" ],
    "Type": "bool",
    "Description": "Determines whether to normalize the states, such that they have mean 0 and standard deviation 1 (done only once after the initial exploration phase)."
  },
  {
    "Name": [ "Reward", "Rescaling", "Enabled" ],
    "Type": "bool",
    "Description": "Determines whether to normalize the rewards, such that they have mean 0 and standard deviation 1"
  }
 ],

 "Termination Criteria":
 [
  {
    "Name": [ "Max Episodes" ],
    "Type": "size_t",
    "Criteria": "(_mode == \"Training\") && (_maxEpisodes > 0) && (_currentEpisode >= _maxEpisodes)",
    "Description": "The solver will stop when the given number of episodes have been run."
  },
  {
    "Name": [ "Max Experiences" ],
    "Type": "size_t",
    "Criteria": "(_mode == \"Training\") && (_maxExperiences > 0) && (_experienceCount >= _maxExperiences)",
    "Description": "The solver will stop when the given number of experiences have been gathered."
  },
  {
    "Name": [ "Max Policy Updates" ],
    "Type": "size_t",
    "Criteria": "(_mode == \"Training\") && (_maxPolicyUpdates > 0) && (_policyUpdateCount >= _maxPolicyUpdates)",
    "Description": "The solver will stop when the given number of optimization steps have been performed."
  }
 ],

 "Variables Configuration":
 [

 ],

 "Internal Settings":
 [
  {
   "Name": [ "Policy", "Parameter Count" ],
   "Type": "size_t",
   "Description": "Stores the number of parameters that determine the probability distribution for the current state sequence."
  }, 
  {
    "Name": [ "Action Lower Bounds" ],
    "Type": "std::vector<float>",
    "Description": "Lower bounds for actions."
  },
  {
    "Name": [ "Action Upper Bounds" ],
    "Type": "std::vector<float>",
    "Description": "Upper bounds for actions."
  },
  {
    "Name": [ "Current Episode" ],
    "Type": "size_t",
    "Description": "Indicates the current episode being processed."
  },
  {
    "Name": [ "Training", "Reward History" ],
    "Type": "std::vector<float>",
    "Description": "Keeps a history of all training episode rewards."
  },
  {
    "Name": [ "Training", "Environment Id History" ],
    "Type": "std::vector<size_t>",
    "Description": "Keeps a history of all training environment ids."
  },
  {
    "Name": [ "Training", "Experience History" ],
    "Type": "std::vector<size_t>",
    "Description": "Keeps a history of all training episode experience counts."
  },
  {
    "Name": [ "Training", "Average Reward" ],
    "Type": "float",
    "Description": "Contains a running average of the training episode rewards."
  },
  {
    "Name": [ "Training", "Last Reward" ],
    "Type": "float",
    "Description": "Remembers the cumulative sum of rewards for the last training episode."
  },
  {
    "Name": [ "Training", "Best Reward" ],
    "Type": "float",
    "Description": "Remembers the best cumulative sum of rewards found so far in any episodes."
  },
  {
    "Name": [ "Training", "Best Episode Id" ],
    "Type": "size_t",
    "Description": "Remembers the episode that obtained the maximum cumulative sum of rewards found so far."
  },
  {
    "Name": [ "Training", "Current Policy" ],
    "Type": "knlohmann::json",
    "Description": "Stores the current training policy configuration."
  },
  {
    "Name": [ "Training", "Best Policy" ],
    "Type": "knlohmann::json",
    "Description": "Stores the best training policy configuration found so far."
  },
  {
    "Name": [ "Testing", "Average Reward History" ],
    "Type": "std::vector<float>",
    "Description": "Keeps a history of all training episode rewards."
  },
  {
    "Name": [ "Testing", "Reward" ],
    "Type": "std::vector<float>",
    "Description": "The cumulative sum of rewards obtained when evaluating the testing samples."
  },
  {
    "Name": [ "Testing", "Best Reward" ],
    "Type": "float",
    "Description": "Remembers the best cumulative sum of rewards from latest testing episodes, if any."
  },
  {
    "Name": [ "Testing", "Worst Reward" ],
    "Type": "float",
    "Description": "Remembers the worst cumulative sum of rewards from latest testing episodes, if any."
  },
  {
    "Name": [ "Testing", "Best Episode Id" ],
    "Type": "size_t",
    "Description": "Remembers the episode Id that obtained the maximum cumulative sum of rewards found so far during testing."
  },
  {
    "Name": [ "Testing", "Candidate Count" ],
    "Type": "size_t",
    "Description": "Remembers the number of candidate policies tested so far."
  },
  {
    "Name": [ "Testing", "Average Reward" ],
    "Type": "float",
    "Description": "Remembers the average cumulative sum of rewards from latest testing episodes, if any."
  },
  {
    "Name": [ "Testing", "Best Average Reward" ],
    "Type": "float",
    "Description": "Remembers the best cumulative sum of rewards found so far from testing episodes."
  },
  {
    "Name": [ "Testing", "Best Policy" ],
    "Type": "knlohmann::json",
    "Description": "Stores the best testing policy configuration found so far."
  },
  {
    "Name": [ "Experience Replay", "Off Policy", "Count" ],
    "Type": "size_t",
    "Description": "Number of off-policy experiences in the experience replay."
  }, 
  {
    "Name": [ "Experience Replay", "Off Policy", "Ratio" ],
    "Type": "float",
    "Description": "Current off policy ratio in the experience replay."
  }, 
  {
    "Name": [ "Experience Replay", "Off Policy", "Current Cutoff" ],
    "Type": "float",
    "Description": "Indicates the current cutoff to classify experiences as on- or off-policy "
  },
  {
    "Name": [ "Current Learning Rate" ],
    "Type": "float",
    "Description": "The current learning rate to use for the NN hyperparameter optimization."
  },
  {
   "Name": [ "Policy Update Count" ],
   "Type": "size_t",
   "Description": "Keeps track of the number of policy updates that have been performed."
  },
  {
   "Name": [ "Current Sample ID" ],
   "Type": "size_t",
   "Description": "Keeps track of the current Sample ID, and makes sure no two equal sample IDs are produced such that this value can be used as random seed."
  },
  {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
  },
  {
    "Name": [ "Experience Count" ],
    "Type": "size_t",
    "Description": "Count of the number of experiences produced so far."
  },
  {
    "Name": [ "Experience Count Per Environment" ],
    "Type": "std::vector<size_t>",
    "Description": "Count of the number of experiences in the replay memory per environment."
  },
  {
    "Name": [ "Reward", "Rescaling", "Means" ],
    "Type": "std::vector<float>",
    "Description": "Contains the mean of the rewards observed during the exploration phase. Rewards will be shifted by this value in order to normalize the reward distribution in the RM."
  },
  {
    "Name": [ "Reward", "Rescaling", "Sigmas" ],
    "Type": "std::vector<float>",
    "Description": "Contains the standard deviation of the rewards. Rewards will be scaled by this value in order to normalize the reward distribution in the RM."
  },
  {
    "Name": [ "Reward", "Rescaling", "Sum Squared Rewards" ],
    "Type": "std::vector<float>",
    "Description": "Sum of squared rewards in experience replay."
  },
  {
    "Name": [ "State Rescaling", "Means" ],
    "Type": "std::vector<float>",
    "Description": "Contains the mean of the states. They will be shifted by this value in order to normalize the state distribution in the RM."
  },
  {
    "Name": [ "State Rescaling", "Sigmas" ],
    "Type": "std::vector<float>",
    "Description": "Contains the standard deviations of the states. They will be scaled by this value in order to normalize the state distribution in the RM."
  }
  
 ],

 "Module Defaults":
 {
   "Episodes Per Generation": 1,
   "Concurrent Workers": 1,
   "Discount Factor": 0.995,
   "Time Sequence Length": 1,
   "Importance Weight Truncation Level": 1.0,
   
   "State Rescaling": 
   {
    "Enabled": false
   },
   
   "Reward":
   {
    "Rescaling": 
    {
     "Enabled": false
    }
   },

   "Mini Batch":
    {
     "Size": 256
    },
       
   "L2 Regularization": 
   {
     "Enabled": false,
     "Importance": 1e-4
   },
   
   "Training":
   {
    "Average Depth": 100,
    "Current Policy": { },
    "Best Policy": { }
   },

   "Testing":
   {
    "Sample Ids": [ ],
    "Current Policy": { },
    "Best Policy": { }
   },

   "Termination Criteria":
   {
    "Max Episodes": 0,
    "Max Experiences": 0,
    "Max Policy Updates": 0
   },

  "Experience Replay":
   {
    "Serialize": true,
    "Off Policy":
    {
     "Cutoff Scale": 4.0,
     "Target": 0.1,
     "REFER Beta": 0.3,
     "Annealing Rate": 0.0
    }
   },

   "Uniform Generator":
   {
    "Type": "Univariate/Uniform",
    "Minimum": 0.0,
    "Maximum": 1.0
   }
 },

 "Variable Defaults":
 {

 }

}
